
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `State` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model State
 * 
 */
export type StateModel = runtime.Types.Result.DefaultSelection<Prisma.$StatePayload>

export type AggregateState = {
  _count: StateCountAggregateOutputType | null
  _min: StateMinAggregateOutputType | null
  _max: StateMaxAggregateOutputType | null
}

export type StateMinAggregateOutputType = {
  code: string | null
  name: string | null
}

export type StateMaxAggregateOutputType = {
  code: string | null
  name: string | null
}

export type StateCountAggregateOutputType = {
  code: number
  name: number
  _all: number
}


export type StateMinAggregateInputType = {
  code?: true
  name?: true
}

export type StateMaxAggregateInputType = {
  code?: true
  name?: true
}

export type StateCountAggregateInputType = {
  code?: true
  name?: true
  _all?: true
}

export type StateAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which State to aggregate.
   */
  where?: Prisma.StateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of States to fetch.
   */
  orderBy?: Prisma.StateOrderByWithRelationInput | Prisma.StateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` States from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` States.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned States
  **/
  _count?: true | StateCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StateMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StateMaxAggregateInputType
}

export type GetStateAggregateType<T extends StateAggregateArgs> = {
      [P in keyof T & keyof AggregateState]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateState[P]>
    : Prisma.GetScalarType<T[P], AggregateState[P]>
}




export type StateGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StateWhereInput
  orderBy?: Prisma.StateOrderByWithAggregationInput | Prisma.StateOrderByWithAggregationInput[]
  by: Prisma.StateScalarFieldEnum[] | Prisma.StateScalarFieldEnum
  having?: Prisma.StateScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StateCountAggregateInputType | true
  _min?: StateMinAggregateInputType
  _max?: StateMaxAggregateInputType
}

export type StateGroupByOutputType = {
  code: string
  name: string
  _count: StateCountAggregateOutputType | null
  _min: StateMinAggregateOutputType | null
  _max: StateMaxAggregateOutputType | null
}

type GetStateGroupByPayload<T extends StateGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StateGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StateGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StateGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StateGroupByOutputType[P]>
      }
    >
  >



export type StateWhereInput = {
  AND?: Prisma.StateWhereInput | Prisma.StateWhereInput[]
  OR?: Prisma.StateWhereInput[]
  NOT?: Prisma.StateWhereInput | Prisma.StateWhereInput[]
  code?: Prisma.StringFilter<"State"> | string
  name?: Prisma.StringFilter<"State"> | string
}

export type StateOrderByWithRelationInput = {
  code?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type StateWhereUniqueInput = Prisma.AtLeast<{
  code?: string
  AND?: Prisma.StateWhereInput | Prisma.StateWhereInput[]
  OR?: Prisma.StateWhereInput[]
  NOT?: Prisma.StateWhereInput | Prisma.StateWhereInput[]
  name?: Prisma.StringFilter<"State"> | string
}, "code">

export type StateOrderByWithAggregationInput = {
  code?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.StateCountOrderByAggregateInput
  _max?: Prisma.StateMaxOrderByAggregateInput
  _min?: Prisma.StateMinOrderByAggregateInput
}

export type StateScalarWhereWithAggregatesInput = {
  AND?: Prisma.StateScalarWhereWithAggregatesInput | Prisma.StateScalarWhereWithAggregatesInput[]
  OR?: Prisma.StateScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StateScalarWhereWithAggregatesInput | Prisma.StateScalarWhereWithAggregatesInput[]
  code?: Prisma.StringWithAggregatesFilter<"State"> | string
  name?: Prisma.StringWithAggregatesFilter<"State"> | string
}

export type StateCreateInput = {
  code: string
  name: string
}

export type StateUncheckedCreateInput = {
  code: string
  name: string
}

export type StateUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StateUncheckedUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StateCreateManyInput = {
  code: string
  name: string
}

export type StateUpdateManyMutationInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StateUncheckedUpdateManyInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type StateCountOrderByAggregateInput = {
  code?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type StateMaxOrderByAggregateInput = {
  code?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type StateMinOrderByAggregateInput = {
  code?: Prisma.SortOrder
  name?: Prisma.SortOrder
}



export type StateSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  code?: boolean
  name?: boolean
}, ExtArgs["result"]["state"]>

export type StateSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  code?: boolean
  name?: boolean
}, ExtArgs["result"]["state"]>

export type StateSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  code?: boolean
  name?: boolean
}, ExtArgs["result"]["state"]>

export type StateSelectScalar = {
  code?: boolean
  name?: boolean
}

export type StateOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"code" | "name", ExtArgs["result"]["state"]>

export type $StatePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "State"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    code: string
    name: string
  }, ExtArgs["result"]["state"]>
  composites: {}
}

export type StateGetPayload<S extends boolean | null | undefined | StateDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StatePayload, S>

export type StateCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StateCountAggregateInputType | true
  }

export interface StateDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['State'], meta: { name: 'State' } }
  /**
   * Find zero or one State that matches the filter.
   * @param {StateFindUniqueArgs} args - Arguments to find a State
   * @example
   * // Get one State
   * const state = await prisma.state.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StateFindUniqueArgs>(args: Prisma.SelectSubset<T, StateFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StateClient<runtime.Types.Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one State that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StateFindUniqueOrThrowArgs} args - Arguments to find a State
   * @example
   * // Get one State
   * const state = await prisma.state.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StateFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StateFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StateClient<runtime.Types.Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first State that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateFindFirstArgs} args - Arguments to find a State
   * @example
   * // Get one State
   * const state = await prisma.state.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StateFindFirstArgs>(args?: Prisma.SelectSubset<T, StateFindFirstArgs<ExtArgs>>): Prisma.Prisma__StateClient<runtime.Types.Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first State that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateFindFirstOrThrowArgs} args - Arguments to find a State
   * @example
   * // Get one State
   * const state = await prisma.state.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StateFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StateFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StateClient<runtime.Types.Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more States that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all States
   * const states = await prisma.state.findMany()
   * 
   * // Get first 10 States
   * const states = await prisma.state.findMany({ take: 10 })
   * 
   * // Only select the `code`
   * const stateWithCodeOnly = await prisma.state.findMany({ select: { code: true } })
   * 
   */
  findMany<T extends StateFindManyArgs>(args?: Prisma.SelectSubset<T, StateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a State.
   * @param {StateCreateArgs} args - Arguments to create a State.
   * @example
   * // Create one State
   * const State = await prisma.state.create({
   *   data: {
   *     // ... data to create a State
   *   }
   * })
   * 
   */
  create<T extends StateCreateArgs>(args: Prisma.SelectSubset<T, StateCreateArgs<ExtArgs>>): Prisma.Prisma__StateClient<runtime.Types.Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many States.
   * @param {StateCreateManyArgs} args - Arguments to create many States.
   * @example
   * // Create many States
   * const state = await prisma.state.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StateCreateManyArgs>(args?: Prisma.SelectSubset<T, StateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many States and returns the data saved in the database.
   * @param {StateCreateManyAndReturnArgs} args - Arguments to create many States.
   * @example
   * // Create many States
   * const state = await prisma.state.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many States and only return the `code`
   * const stateWithCodeOnly = await prisma.state.createManyAndReturn({
   *   select: { code: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StateCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a State.
   * @param {StateDeleteArgs} args - Arguments to delete one State.
   * @example
   * // Delete one State
   * const State = await prisma.state.delete({
   *   where: {
   *     // ... filter to delete one State
   *   }
   * })
   * 
   */
  delete<T extends StateDeleteArgs>(args: Prisma.SelectSubset<T, StateDeleteArgs<ExtArgs>>): Prisma.Prisma__StateClient<runtime.Types.Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one State.
   * @param {StateUpdateArgs} args - Arguments to update one State.
   * @example
   * // Update one State
   * const state = await prisma.state.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StateUpdateArgs>(args: Prisma.SelectSubset<T, StateUpdateArgs<ExtArgs>>): Prisma.Prisma__StateClient<runtime.Types.Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more States.
   * @param {StateDeleteManyArgs} args - Arguments to filter States to delete.
   * @example
   * // Delete a few States
   * const { count } = await prisma.state.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StateDeleteManyArgs>(args?: Prisma.SelectSubset<T, StateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more States.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many States
   * const state = await prisma.state.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StateUpdateManyArgs>(args: Prisma.SelectSubset<T, StateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more States and returns the data updated in the database.
   * @param {StateUpdateManyAndReturnArgs} args - Arguments to update many States.
   * @example
   * // Update many States
   * const state = await prisma.state.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more States and only return the `code`
   * const stateWithCodeOnly = await prisma.state.updateManyAndReturn({
   *   select: { code: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StateUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one State.
   * @param {StateUpsertArgs} args - Arguments to update or create a State.
   * @example
   * // Update or create a State
   * const state = await prisma.state.upsert({
   *   create: {
   *     // ... data to create a State
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the State we want to update
   *   }
   * })
   */
  upsert<T extends StateUpsertArgs>(args: Prisma.SelectSubset<T, StateUpsertArgs<ExtArgs>>): Prisma.Prisma__StateClient<runtime.Types.Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of States.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateCountArgs} args - Arguments to filter States to count.
   * @example
   * // Count the number of States
   * const count = await prisma.state.count({
   *   where: {
   *     // ... the filter for the States we want to count
   *   }
   * })
  **/
  count<T extends StateCountArgs>(
    args?: Prisma.Subset<T, StateCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StateCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a State.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StateAggregateArgs>(args: Prisma.Subset<T, StateAggregateArgs>): Prisma.PrismaPromise<GetStateAggregateType<T>>

  /**
   * Group by State.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StateGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StateGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StateGroupByArgs['orderBy'] }
      : { orderBy?: StateGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the State model
 */
readonly fields: StateFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for State.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StateClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the State model
 */
export interface StateFieldRefs {
  readonly code: Prisma.FieldRef<"State", 'String'>
  readonly name: Prisma.FieldRef<"State", 'String'>
}
    

// Custom InputTypes
/**
 * State findUnique
 */
export type StateFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the State
   */
  select?: Prisma.StateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the State
   */
  omit?: Prisma.StateOmit<ExtArgs> | null
  /**
   * Filter, which State to fetch.
   */
  where: Prisma.StateWhereUniqueInput
}

/**
 * State findUniqueOrThrow
 */
export type StateFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the State
   */
  select?: Prisma.StateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the State
   */
  omit?: Prisma.StateOmit<ExtArgs> | null
  /**
   * Filter, which State to fetch.
   */
  where: Prisma.StateWhereUniqueInput
}

/**
 * State findFirst
 */
export type StateFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the State
   */
  select?: Prisma.StateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the State
   */
  omit?: Prisma.StateOmit<ExtArgs> | null
  /**
   * Filter, which State to fetch.
   */
  where?: Prisma.StateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of States to fetch.
   */
  orderBy?: Prisma.StateOrderByWithRelationInput | Prisma.StateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for States.
   */
  cursor?: Prisma.StateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` States from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` States.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of States.
   */
  distinct?: Prisma.StateScalarFieldEnum | Prisma.StateScalarFieldEnum[]
}

/**
 * State findFirstOrThrow
 */
export type StateFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the State
   */
  select?: Prisma.StateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the State
   */
  omit?: Prisma.StateOmit<ExtArgs> | null
  /**
   * Filter, which State to fetch.
   */
  where?: Prisma.StateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of States to fetch.
   */
  orderBy?: Prisma.StateOrderByWithRelationInput | Prisma.StateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for States.
   */
  cursor?: Prisma.StateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` States from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` States.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of States.
   */
  distinct?: Prisma.StateScalarFieldEnum | Prisma.StateScalarFieldEnum[]
}

/**
 * State findMany
 */
export type StateFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the State
   */
  select?: Prisma.StateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the State
   */
  omit?: Prisma.StateOmit<ExtArgs> | null
  /**
   * Filter, which States to fetch.
   */
  where?: Prisma.StateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of States to fetch.
   */
  orderBy?: Prisma.StateOrderByWithRelationInput | Prisma.StateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing States.
   */
  cursor?: Prisma.StateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` States from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` States.
   */
  skip?: number
  distinct?: Prisma.StateScalarFieldEnum | Prisma.StateScalarFieldEnum[]
}

/**
 * State create
 */
export type StateCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the State
   */
  select?: Prisma.StateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the State
   */
  omit?: Prisma.StateOmit<ExtArgs> | null
  /**
   * The data needed to create a State.
   */
  data: Prisma.XOR<Prisma.StateCreateInput, Prisma.StateUncheckedCreateInput>
}

/**
 * State createMany
 */
export type StateCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many States.
   */
  data: Prisma.StateCreateManyInput | Prisma.StateCreateManyInput[]
}

/**
 * State createManyAndReturn
 */
export type StateCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the State
   */
  select?: Prisma.StateSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the State
   */
  omit?: Prisma.StateOmit<ExtArgs> | null
  /**
   * The data used to create many States.
   */
  data: Prisma.StateCreateManyInput | Prisma.StateCreateManyInput[]
}

/**
 * State update
 */
export type StateUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the State
   */
  select?: Prisma.StateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the State
   */
  omit?: Prisma.StateOmit<ExtArgs> | null
  /**
   * The data needed to update a State.
   */
  data: Prisma.XOR<Prisma.StateUpdateInput, Prisma.StateUncheckedUpdateInput>
  /**
   * Choose, which State to update.
   */
  where: Prisma.StateWhereUniqueInput
}

/**
 * State updateMany
 */
export type StateUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update States.
   */
  data: Prisma.XOR<Prisma.StateUpdateManyMutationInput, Prisma.StateUncheckedUpdateManyInput>
  /**
   * Filter which States to update
   */
  where?: Prisma.StateWhereInput
  /**
   * Limit how many States to update.
   */
  limit?: number
}

/**
 * State updateManyAndReturn
 */
export type StateUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the State
   */
  select?: Prisma.StateSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the State
   */
  omit?: Prisma.StateOmit<ExtArgs> | null
  /**
   * The data used to update States.
   */
  data: Prisma.XOR<Prisma.StateUpdateManyMutationInput, Prisma.StateUncheckedUpdateManyInput>
  /**
   * Filter which States to update
   */
  where?: Prisma.StateWhereInput
  /**
   * Limit how many States to update.
   */
  limit?: number
}

/**
 * State upsert
 */
export type StateUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the State
   */
  select?: Prisma.StateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the State
   */
  omit?: Prisma.StateOmit<ExtArgs> | null
  /**
   * The filter to search for the State to update in case it exists.
   */
  where: Prisma.StateWhereUniqueInput
  /**
   * In case the State found by the `where` argument doesn't exist, create a new State with this data.
   */
  create: Prisma.XOR<Prisma.StateCreateInput, Prisma.StateUncheckedCreateInput>
  /**
   * In case the State was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StateUpdateInput, Prisma.StateUncheckedUpdateInput>
}

/**
 * State delete
 */
export type StateDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the State
   */
  select?: Prisma.StateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the State
   */
  omit?: Prisma.StateOmit<ExtArgs> | null
  /**
   * Filter which State to delete.
   */
  where: Prisma.StateWhereUniqueInput
}

/**
 * State deleteMany
 */
export type StateDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which States to delete
   */
  where?: Prisma.StateWhereInput
  /**
   * Limit how many States to delete.
   */
  limit?: number
}

/**
 * State without action
 */
export type StateDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the State
   */
  select?: Prisma.StateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the State
   */
  omit?: Prisma.StateOmit<ExtArgs> | null
}
