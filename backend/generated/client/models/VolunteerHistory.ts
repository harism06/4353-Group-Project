
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `VolunteerHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model VolunteerHistory
 * 
 */
export type VolunteerHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$VolunteerHistoryPayload>

export type AggregateVolunteerHistory = {
  _count: VolunteerHistoryCountAggregateOutputType | null
  _avg: VolunteerHistoryAvgAggregateOutputType | null
  _sum: VolunteerHistorySumAggregateOutputType | null
  _min: VolunteerHistoryMinAggregateOutputType | null
  _max: VolunteerHistoryMaxAggregateOutputType | null
}

export type VolunteerHistoryAvgAggregateOutputType = {
  hours: number | null
}

export type VolunteerHistorySumAggregateOutputType = {
  hours: number | null
}

export type VolunteerHistoryMinAggregateOutputType = {
  id: string | null
  userId: string | null
  eventId: string | null
  status: string | null
  hours: number | null
  dateParticipated: Date | null
  createdAt: Date | null
}

export type VolunteerHistoryMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  eventId: string | null
  status: string | null
  hours: number | null
  dateParticipated: Date | null
  createdAt: Date | null
}

export type VolunteerHistoryCountAggregateOutputType = {
  id: number
  userId: number
  eventId: number
  status: number
  hours: number
  dateParticipated: number
  createdAt: number
  _all: number
}


export type VolunteerHistoryAvgAggregateInputType = {
  hours?: true
}

export type VolunteerHistorySumAggregateInputType = {
  hours?: true
}

export type VolunteerHistoryMinAggregateInputType = {
  id?: true
  userId?: true
  eventId?: true
  status?: true
  hours?: true
  dateParticipated?: true
  createdAt?: true
}

export type VolunteerHistoryMaxAggregateInputType = {
  id?: true
  userId?: true
  eventId?: true
  status?: true
  hours?: true
  dateParticipated?: true
  createdAt?: true
}

export type VolunteerHistoryCountAggregateInputType = {
  id?: true
  userId?: true
  eventId?: true
  status?: true
  hours?: true
  dateParticipated?: true
  createdAt?: true
  _all?: true
}

export type VolunteerHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which VolunteerHistory to aggregate.
   */
  where?: Prisma.VolunteerHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VolunteerHistories to fetch.
   */
  orderBy?: Prisma.VolunteerHistoryOrderByWithRelationInput | Prisma.VolunteerHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.VolunteerHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VolunteerHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VolunteerHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned VolunteerHistories
  **/
  _count?: true | VolunteerHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: VolunteerHistoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: VolunteerHistorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: VolunteerHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: VolunteerHistoryMaxAggregateInputType
}

export type GetVolunteerHistoryAggregateType<T extends VolunteerHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateVolunteerHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVolunteerHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateVolunteerHistory[P]>
}




export type VolunteerHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VolunteerHistoryWhereInput
  orderBy?: Prisma.VolunteerHistoryOrderByWithAggregationInput | Prisma.VolunteerHistoryOrderByWithAggregationInput[]
  by: Prisma.VolunteerHistoryScalarFieldEnum[] | Prisma.VolunteerHistoryScalarFieldEnum
  having?: Prisma.VolunteerHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: VolunteerHistoryCountAggregateInputType | true
  _avg?: VolunteerHistoryAvgAggregateInputType
  _sum?: VolunteerHistorySumAggregateInputType
  _min?: VolunteerHistoryMinAggregateInputType
  _max?: VolunteerHistoryMaxAggregateInputType
}

export type VolunteerHistoryGroupByOutputType = {
  id: string
  userId: string
  eventId: string
  status: string
  hours: number
  dateParticipated: Date
  createdAt: Date
  _count: VolunteerHistoryCountAggregateOutputType | null
  _avg: VolunteerHistoryAvgAggregateOutputType | null
  _sum: VolunteerHistorySumAggregateOutputType | null
  _min: VolunteerHistoryMinAggregateOutputType | null
  _max: VolunteerHistoryMaxAggregateOutputType | null
}

type GetVolunteerHistoryGroupByPayload<T extends VolunteerHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VolunteerHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof VolunteerHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VolunteerHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VolunteerHistoryGroupByOutputType[P]>
      }
    >
  >



export type VolunteerHistoryWhereInput = {
  AND?: Prisma.VolunteerHistoryWhereInput | Prisma.VolunteerHistoryWhereInput[]
  OR?: Prisma.VolunteerHistoryWhereInput[]
  NOT?: Prisma.VolunteerHistoryWhereInput | Prisma.VolunteerHistoryWhereInput[]
  id?: Prisma.StringFilter<"VolunteerHistory"> | string
  userId?: Prisma.StringFilter<"VolunteerHistory"> | string
  eventId?: Prisma.StringFilter<"VolunteerHistory"> | string
  status?: Prisma.StringFilter<"VolunteerHistory"> | string
  hours?: Prisma.IntFilter<"VolunteerHistory"> | number
  dateParticipated?: Prisma.DateTimeFilter<"VolunteerHistory"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"VolunteerHistory"> | Date | string
}

export type VolunteerHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  hours?: Prisma.SortOrder
  dateParticipated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type VolunteerHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.VolunteerHistoryWhereInput | Prisma.VolunteerHistoryWhereInput[]
  OR?: Prisma.VolunteerHistoryWhereInput[]
  NOT?: Prisma.VolunteerHistoryWhereInput | Prisma.VolunteerHistoryWhereInput[]
  userId?: Prisma.StringFilter<"VolunteerHistory"> | string
  eventId?: Prisma.StringFilter<"VolunteerHistory"> | string
  status?: Prisma.StringFilter<"VolunteerHistory"> | string
  hours?: Prisma.IntFilter<"VolunteerHistory"> | number
  dateParticipated?: Prisma.DateTimeFilter<"VolunteerHistory"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"VolunteerHistory"> | Date | string
}, "id">

export type VolunteerHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  hours?: Prisma.SortOrder
  dateParticipated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.VolunteerHistoryCountOrderByAggregateInput
  _avg?: Prisma.VolunteerHistoryAvgOrderByAggregateInput
  _max?: Prisma.VolunteerHistoryMaxOrderByAggregateInput
  _min?: Prisma.VolunteerHistoryMinOrderByAggregateInput
  _sum?: Prisma.VolunteerHistorySumOrderByAggregateInput
}

export type VolunteerHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.VolunteerHistoryScalarWhereWithAggregatesInput | Prisma.VolunteerHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.VolunteerHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.VolunteerHistoryScalarWhereWithAggregatesInput | Prisma.VolunteerHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"VolunteerHistory"> | string
  userId?: Prisma.StringWithAggregatesFilter<"VolunteerHistory"> | string
  eventId?: Prisma.StringWithAggregatesFilter<"VolunteerHistory"> | string
  status?: Prisma.StringWithAggregatesFilter<"VolunteerHistory"> | string
  hours?: Prisma.IntWithAggregatesFilter<"VolunteerHistory"> | number
  dateParticipated?: Prisma.DateTimeWithAggregatesFilter<"VolunteerHistory"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"VolunteerHistory"> | Date | string
}

export type VolunteerHistoryCreateInput = {
  id?: string
  userId: string
  eventId: string
  status: string
  hours?: number
  dateParticipated?: Date | string
  createdAt?: Date | string
}

export type VolunteerHistoryUncheckedCreateInput = {
  id?: string
  userId: string
  eventId: string
  status: string
  hours?: number
  dateParticipated?: Date | string
  createdAt?: Date | string
}

export type VolunteerHistoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  hours?: Prisma.IntFieldUpdateOperationsInput | number
  dateParticipated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VolunteerHistoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  hours?: Prisma.IntFieldUpdateOperationsInput | number
  dateParticipated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VolunteerHistoryCreateManyInput = {
  id?: string
  userId: string
  eventId: string
  status: string
  hours?: number
  dateParticipated?: Date | string
  createdAt?: Date | string
}

export type VolunteerHistoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  hours?: Prisma.IntFieldUpdateOperationsInput | number
  dateParticipated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VolunteerHistoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  eventId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  hours?: Prisma.IntFieldUpdateOperationsInput | number
  dateParticipated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VolunteerHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  hours?: Prisma.SortOrder
  dateParticipated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type VolunteerHistoryAvgOrderByAggregateInput = {
  hours?: Prisma.SortOrder
}

export type VolunteerHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  hours?: Prisma.SortOrder
  dateParticipated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type VolunteerHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  eventId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  hours?: Prisma.SortOrder
  dateParticipated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type VolunteerHistorySumOrderByAggregateInput = {
  hours?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type VolunteerHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  eventId?: boolean
  status?: boolean
  hours?: boolean
  dateParticipated?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["volunteerHistory"]>

export type VolunteerHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  eventId?: boolean
  status?: boolean
  hours?: boolean
  dateParticipated?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["volunteerHistory"]>

export type VolunteerHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  eventId?: boolean
  status?: boolean
  hours?: boolean
  dateParticipated?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["volunteerHistory"]>

export type VolunteerHistorySelectScalar = {
  id?: boolean
  userId?: boolean
  eventId?: boolean
  status?: boolean
  hours?: boolean
  dateParticipated?: boolean
  createdAt?: boolean
}

export type VolunteerHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "eventId" | "status" | "hours" | "dateParticipated" | "createdAt", ExtArgs["result"]["volunteerHistory"]>

export type $VolunteerHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "VolunteerHistory"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    eventId: string
    status: string
    hours: number
    dateParticipated: Date
    createdAt: Date
  }, ExtArgs["result"]["volunteerHistory"]>
  composites: {}
}

export type VolunteerHistoryGetPayload<S extends boolean | null | undefined | VolunteerHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$VolunteerHistoryPayload, S>

export type VolunteerHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<VolunteerHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VolunteerHistoryCountAggregateInputType | true
  }

export interface VolunteerHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VolunteerHistory'], meta: { name: 'VolunteerHistory' } }
  /**
   * Find zero or one VolunteerHistory that matches the filter.
   * @param {VolunteerHistoryFindUniqueArgs} args - Arguments to find a VolunteerHistory
   * @example
   * // Get one VolunteerHistory
   * const volunteerHistory = await prisma.volunteerHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VolunteerHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, VolunteerHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__VolunteerHistoryClient<runtime.Types.Result.GetResult<Prisma.$VolunteerHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one VolunteerHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VolunteerHistoryFindUniqueOrThrowArgs} args - Arguments to find a VolunteerHistory
   * @example
   * // Get one VolunteerHistory
   * const volunteerHistory = await prisma.volunteerHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VolunteerHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, VolunteerHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__VolunteerHistoryClient<runtime.Types.Result.GetResult<Prisma.$VolunteerHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first VolunteerHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VolunteerHistoryFindFirstArgs} args - Arguments to find a VolunteerHistory
   * @example
   * // Get one VolunteerHistory
   * const volunteerHistory = await prisma.volunteerHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VolunteerHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, VolunteerHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__VolunteerHistoryClient<runtime.Types.Result.GetResult<Prisma.$VolunteerHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first VolunteerHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VolunteerHistoryFindFirstOrThrowArgs} args - Arguments to find a VolunteerHistory
   * @example
   * // Get one VolunteerHistory
   * const volunteerHistory = await prisma.volunteerHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VolunteerHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, VolunteerHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__VolunteerHistoryClient<runtime.Types.Result.GetResult<Prisma.$VolunteerHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more VolunteerHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VolunteerHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all VolunteerHistories
   * const volunteerHistories = await prisma.volunteerHistory.findMany()
   * 
   * // Get first 10 VolunteerHistories
   * const volunteerHistories = await prisma.volunteerHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const volunteerHistoryWithIdOnly = await prisma.volunteerHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends VolunteerHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, VolunteerHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VolunteerHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a VolunteerHistory.
   * @param {VolunteerHistoryCreateArgs} args - Arguments to create a VolunteerHistory.
   * @example
   * // Create one VolunteerHistory
   * const VolunteerHistory = await prisma.volunteerHistory.create({
   *   data: {
   *     // ... data to create a VolunteerHistory
   *   }
   * })
   * 
   */
  create<T extends VolunteerHistoryCreateArgs>(args: Prisma.SelectSubset<T, VolunteerHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__VolunteerHistoryClient<runtime.Types.Result.GetResult<Prisma.$VolunteerHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many VolunteerHistories.
   * @param {VolunteerHistoryCreateManyArgs} args - Arguments to create many VolunteerHistories.
   * @example
   * // Create many VolunteerHistories
   * const volunteerHistory = await prisma.volunteerHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends VolunteerHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, VolunteerHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many VolunteerHistories and returns the data saved in the database.
   * @param {VolunteerHistoryCreateManyAndReturnArgs} args - Arguments to create many VolunteerHistories.
   * @example
   * // Create many VolunteerHistories
   * const volunteerHistory = await prisma.volunteerHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many VolunteerHistories and only return the `id`
   * const volunteerHistoryWithIdOnly = await prisma.volunteerHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends VolunteerHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, VolunteerHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VolunteerHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a VolunteerHistory.
   * @param {VolunteerHistoryDeleteArgs} args - Arguments to delete one VolunteerHistory.
   * @example
   * // Delete one VolunteerHistory
   * const VolunteerHistory = await prisma.volunteerHistory.delete({
   *   where: {
   *     // ... filter to delete one VolunteerHistory
   *   }
   * })
   * 
   */
  delete<T extends VolunteerHistoryDeleteArgs>(args: Prisma.SelectSubset<T, VolunteerHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__VolunteerHistoryClient<runtime.Types.Result.GetResult<Prisma.$VolunteerHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one VolunteerHistory.
   * @param {VolunteerHistoryUpdateArgs} args - Arguments to update one VolunteerHistory.
   * @example
   * // Update one VolunteerHistory
   * const volunteerHistory = await prisma.volunteerHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends VolunteerHistoryUpdateArgs>(args: Prisma.SelectSubset<T, VolunteerHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__VolunteerHistoryClient<runtime.Types.Result.GetResult<Prisma.$VolunteerHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more VolunteerHistories.
   * @param {VolunteerHistoryDeleteManyArgs} args - Arguments to filter VolunteerHistories to delete.
   * @example
   * // Delete a few VolunteerHistories
   * const { count } = await prisma.volunteerHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends VolunteerHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, VolunteerHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more VolunteerHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VolunteerHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many VolunteerHistories
   * const volunteerHistory = await prisma.volunteerHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends VolunteerHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, VolunteerHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more VolunteerHistories and returns the data updated in the database.
   * @param {VolunteerHistoryUpdateManyAndReturnArgs} args - Arguments to update many VolunteerHistories.
   * @example
   * // Update many VolunteerHistories
   * const volunteerHistory = await prisma.volunteerHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more VolunteerHistories and only return the `id`
   * const volunteerHistoryWithIdOnly = await prisma.volunteerHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends VolunteerHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, VolunteerHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VolunteerHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one VolunteerHistory.
   * @param {VolunteerHistoryUpsertArgs} args - Arguments to update or create a VolunteerHistory.
   * @example
   * // Update or create a VolunteerHistory
   * const volunteerHistory = await prisma.volunteerHistory.upsert({
   *   create: {
   *     // ... data to create a VolunteerHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the VolunteerHistory we want to update
   *   }
   * })
   */
  upsert<T extends VolunteerHistoryUpsertArgs>(args: Prisma.SelectSubset<T, VolunteerHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__VolunteerHistoryClient<runtime.Types.Result.GetResult<Prisma.$VolunteerHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of VolunteerHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VolunteerHistoryCountArgs} args - Arguments to filter VolunteerHistories to count.
   * @example
   * // Count the number of VolunteerHistories
   * const count = await prisma.volunteerHistory.count({
   *   where: {
   *     // ... the filter for the VolunteerHistories we want to count
   *   }
   * })
  **/
  count<T extends VolunteerHistoryCountArgs>(
    args?: Prisma.Subset<T, VolunteerHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], VolunteerHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a VolunteerHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VolunteerHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends VolunteerHistoryAggregateArgs>(args: Prisma.Subset<T, VolunteerHistoryAggregateArgs>): Prisma.PrismaPromise<GetVolunteerHistoryAggregateType<T>>

  /**
   * Group by VolunteerHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VolunteerHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends VolunteerHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VolunteerHistoryGroupByArgs['orderBy'] }
      : { orderBy?: VolunteerHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, VolunteerHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVolunteerHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the VolunteerHistory model
 */
readonly fields: VolunteerHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for VolunteerHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VolunteerHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the VolunteerHistory model
 */
export interface VolunteerHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"VolunteerHistory", 'String'>
  readonly userId: Prisma.FieldRef<"VolunteerHistory", 'String'>
  readonly eventId: Prisma.FieldRef<"VolunteerHistory", 'String'>
  readonly status: Prisma.FieldRef<"VolunteerHistory", 'String'>
  readonly hours: Prisma.FieldRef<"VolunteerHistory", 'Int'>
  readonly dateParticipated: Prisma.FieldRef<"VolunteerHistory", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"VolunteerHistory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * VolunteerHistory findUnique
 */
export type VolunteerHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VolunteerHistory
   */
  select?: Prisma.VolunteerHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the VolunteerHistory
   */
  omit?: Prisma.VolunteerHistoryOmit<ExtArgs> | null
  /**
   * Filter, which VolunteerHistory to fetch.
   */
  where: Prisma.VolunteerHistoryWhereUniqueInput
}

/**
 * VolunteerHistory findUniqueOrThrow
 */
export type VolunteerHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VolunteerHistory
   */
  select?: Prisma.VolunteerHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the VolunteerHistory
   */
  omit?: Prisma.VolunteerHistoryOmit<ExtArgs> | null
  /**
   * Filter, which VolunteerHistory to fetch.
   */
  where: Prisma.VolunteerHistoryWhereUniqueInput
}

/**
 * VolunteerHistory findFirst
 */
export type VolunteerHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VolunteerHistory
   */
  select?: Prisma.VolunteerHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the VolunteerHistory
   */
  omit?: Prisma.VolunteerHistoryOmit<ExtArgs> | null
  /**
   * Filter, which VolunteerHistory to fetch.
   */
  where?: Prisma.VolunteerHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VolunteerHistories to fetch.
   */
  orderBy?: Prisma.VolunteerHistoryOrderByWithRelationInput | Prisma.VolunteerHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for VolunteerHistories.
   */
  cursor?: Prisma.VolunteerHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VolunteerHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VolunteerHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of VolunteerHistories.
   */
  distinct?: Prisma.VolunteerHistoryScalarFieldEnum | Prisma.VolunteerHistoryScalarFieldEnum[]
}

/**
 * VolunteerHistory findFirstOrThrow
 */
export type VolunteerHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VolunteerHistory
   */
  select?: Prisma.VolunteerHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the VolunteerHistory
   */
  omit?: Prisma.VolunteerHistoryOmit<ExtArgs> | null
  /**
   * Filter, which VolunteerHistory to fetch.
   */
  where?: Prisma.VolunteerHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VolunteerHistories to fetch.
   */
  orderBy?: Prisma.VolunteerHistoryOrderByWithRelationInput | Prisma.VolunteerHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for VolunteerHistories.
   */
  cursor?: Prisma.VolunteerHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VolunteerHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VolunteerHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of VolunteerHistories.
   */
  distinct?: Prisma.VolunteerHistoryScalarFieldEnum | Prisma.VolunteerHistoryScalarFieldEnum[]
}

/**
 * VolunteerHistory findMany
 */
export type VolunteerHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VolunteerHistory
   */
  select?: Prisma.VolunteerHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the VolunteerHistory
   */
  omit?: Prisma.VolunteerHistoryOmit<ExtArgs> | null
  /**
   * Filter, which VolunteerHistories to fetch.
   */
  where?: Prisma.VolunteerHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of VolunteerHistories to fetch.
   */
  orderBy?: Prisma.VolunteerHistoryOrderByWithRelationInput | Prisma.VolunteerHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing VolunteerHistories.
   */
  cursor?: Prisma.VolunteerHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` VolunteerHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` VolunteerHistories.
   */
  skip?: number
  distinct?: Prisma.VolunteerHistoryScalarFieldEnum | Prisma.VolunteerHistoryScalarFieldEnum[]
}

/**
 * VolunteerHistory create
 */
export type VolunteerHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VolunteerHistory
   */
  select?: Prisma.VolunteerHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the VolunteerHistory
   */
  omit?: Prisma.VolunteerHistoryOmit<ExtArgs> | null
  /**
   * The data needed to create a VolunteerHistory.
   */
  data: Prisma.XOR<Prisma.VolunteerHistoryCreateInput, Prisma.VolunteerHistoryUncheckedCreateInput>
}

/**
 * VolunteerHistory createMany
 */
export type VolunteerHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many VolunteerHistories.
   */
  data: Prisma.VolunteerHistoryCreateManyInput | Prisma.VolunteerHistoryCreateManyInput[]
}

/**
 * VolunteerHistory createManyAndReturn
 */
export type VolunteerHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VolunteerHistory
   */
  select?: Prisma.VolunteerHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the VolunteerHistory
   */
  omit?: Prisma.VolunteerHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many VolunteerHistories.
   */
  data: Prisma.VolunteerHistoryCreateManyInput | Prisma.VolunteerHistoryCreateManyInput[]
}

/**
 * VolunteerHistory update
 */
export type VolunteerHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VolunteerHistory
   */
  select?: Prisma.VolunteerHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the VolunteerHistory
   */
  omit?: Prisma.VolunteerHistoryOmit<ExtArgs> | null
  /**
   * The data needed to update a VolunteerHistory.
   */
  data: Prisma.XOR<Prisma.VolunteerHistoryUpdateInput, Prisma.VolunteerHistoryUncheckedUpdateInput>
  /**
   * Choose, which VolunteerHistory to update.
   */
  where: Prisma.VolunteerHistoryWhereUniqueInput
}

/**
 * VolunteerHistory updateMany
 */
export type VolunteerHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update VolunteerHistories.
   */
  data: Prisma.XOR<Prisma.VolunteerHistoryUpdateManyMutationInput, Prisma.VolunteerHistoryUncheckedUpdateManyInput>
  /**
   * Filter which VolunteerHistories to update
   */
  where?: Prisma.VolunteerHistoryWhereInput
  /**
   * Limit how many VolunteerHistories to update.
   */
  limit?: number
}

/**
 * VolunteerHistory updateManyAndReturn
 */
export type VolunteerHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VolunteerHistory
   */
  select?: Prisma.VolunteerHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the VolunteerHistory
   */
  omit?: Prisma.VolunteerHistoryOmit<ExtArgs> | null
  /**
   * The data used to update VolunteerHistories.
   */
  data: Prisma.XOR<Prisma.VolunteerHistoryUpdateManyMutationInput, Prisma.VolunteerHistoryUncheckedUpdateManyInput>
  /**
   * Filter which VolunteerHistories to update
   */
  where?: Prisma.VolunteerHistoryWhereInput
  /**
   * Limit how many VolunteerHistories to update.
   */
  limit?: number
}

/**
 * VolunteerHistory upsert
 */
export type VolunteerHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VolunteerHistory
   */
  select?: Prisma.VolunteerHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the VolunteerHistory
   */
  omit?: Prisma.VolunteerHistoryOmit<ExtArgs> | null
  /**
   * The filter to search for the VolunteerHistory to update in case it exists.
   */
  where: Prisma.VolunteerHistoryWhereUniqueInput
  /**
   * In case the VolunteerHistory found by the `where` argument doesn't exist, create a new VolunteerHistory with this data.
   */
  create: Prisma.XOR<Prisma.VolunteerHistoryCreateInput, Prisma.VolunteerHistoryUncheckedCreateInput>
  /**
   * In case the VolunteerHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.VolunteerHistoryUpdateInput, Prisma.VolunteerHistoryUncheckedUpdateInput>
}

/**
 * VolunteerHistory delete
 */
export type VolunteerHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VolunteerHistory
   */
  select?: Prisma.VolunteerHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the VolunteerHistory
   */
  omit?: Prisma.VolunteerHistoryOmit<ExtArgs> | null
  /**
   * Filter which VolunteerHistory to delete.
   */
  where: Prisma.VolunteerHistoryWhereUniqueInput
}

/**
 * VolunteerHistory deleteMany
 */
export type VolunteerHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which VolunteerHistories to delete
   */
  where?: Prisma.VolunteerHistoryWhereInput
  /**
   * Limit how many VolunteerHistories to delete.
   */
  limit?: number
}

/**
 * VolunteerHistory without action
 */
export type VolunteerHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VolunteerHistory
   */
  select?: Prisma.VolunteerHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the VolunteerHistory
   */
  omit?: Prisma.VolunteerHistoryOmit<ExtArgs> | null
}
